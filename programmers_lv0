# 두 수의 곱
def solution(num1, num2):
    answer = 0
    answer = num1 * num2
    return answer
    
# 두 수의 차
def solution(num1, num2):
    answer = 0
    answer = num1 - num2
    return answer
    
# 몫 구하기
def solution(num1, num2):
    answer = 0
    answer = num1 // num2
    return answer

# 나이 출력
def solution(age):
    answer = 0
    answer = 2022 - age + 1
    return answer

# 각도기
def solution(angle):
    answer = 0
    if (angle >0 and angle<90):
        answer = 1
    elif(angle == 90):
        answer = 2
    elif (angle >90 and angle < 180):
        answer = 3
    elif (angle == 180):
        answer = 4
    return answer
    
# 배열의 평균값
def solution(numbers):
    answer = sum(numbers) / len(numbers)
    return answer
    
# 양꼬치
def solution(n, k):
    answer = 0
    beef = 12000 * n
    drink = 2000 * k - 2000 * (n//10)
    answer = beef + drink
    return answer

# 짝수의 합
def solution(n):
    answer = 0
    for i in range(2,n+1,2):
        answer += i
    return answer

# 배열 원소의 길이
def solution(strlist):
    answer = []
    for i in range(len(strlist)):
        answer.append(len(strlist[i]))
    return answer

# 피자 나눠 먹기(1)
def solution(n):
    answer = 0
    if(n == 1) :
        answer =1
    elif(n % 7 == 0):
        answer = n / 7
    else:
        answer = n//7 +1
    return answer

# 점의 위치 구하기
def solution(dot):
    answer = 0
    if dot[0] > 0 and dot[1] > 0 :
        answer = 1
    elif dot[0] < 0 and dot[1] > 0 :
        answer = 2
    elif dot[0] < 0 and dot[1] < 0 :
        answer = 3
    elif dot[0] > 0 and dot[1] < 0 :
        answer = 4
    return answer

# 짝수 홀수 개수
def solution(num_list):
    answer = [0,0]

    for i in range(len(num_list)):
        if(num_list[i] % 2 == 0):
            answer[0] += 1
        else:
            answer[1] += 1
    
    return answer

# 문자열 뒤집기
def solution(my_string):
    answer = ''
    answer = my_string[::-1]
    return answer

# 배열 뒤집기
def solution(num_list):
    num_list.reverse()
    answer = num_list
    return answer

# 배열 원소의 길이
def solution(strlist):
    answer = []
    for i in range(len(strlist)):
        answer.append(len(strlist[i]))        
    return answer
    
# 피자 나눠 먹기(3)
def solution(slice, n):
    answer = 0
    if(n % slice == 0):
        answer = n // slice
    else :
        answer = n // slice +1
    return answer

# 중복된 숫자 개수
def solution(array, n):
    answer = array.count(n)
    return answer

# 짝수는 싫어요
def solution(n):
    answer = []
    for i in range(1,n+1):
        if(i % 2 != 0):
            answer.append(i)
        else:
            pass
    return answer

# 특정 문자 제거하기
def solution(my_string, letter):
    answer = ''
    s= my_string.replace(letter,"")
    answer = s   
    return answer

# 아이스 아메리카노
def solution(money):
    answer = []
    s = money // 5500
    d = money % 5500
    answer.append(s)
    answer.append(d)
    return answer

# 7의 개수
def solution(array):
    answer = 0
    num_count = ""
    for i in array:
        num_count += str(i)    
    answer = num_count.count("7")
    return answer

#  문자열 정렬하기(2)
def solution(my_string):
    answer = ''
    a = my_string.lower()            
    listr = list(a)                  
    listr.sort(reverse = False)      
    return answer.join(listr)

# 세균 증식
def solution(n, t):
    answer = 0
    result = n
    for i in range(1,t+1):
        result *= 2
        
    answer = result
    return answer

# 문자 반복 출력하기
def solution(my_string, n):
    answer = []
    for i in range(len(my_string)):
        for j in range(n):
            answer.append(my_string[i])
    return "".join(answer)

# 순서쌍의 개수
def solution(n):
    answer = 0
    for i in range(1, n+1):
        if(n % i == 0):
            answer +=1
    return answer

# 머쓱이보다 키 큰 사람
def solution(array, height):
    answer = 0
    for i in range(len(array)):
        if(array[i] > height):
            answer += 1
    return answer

# 옷가게 할인 받기
def solution(price):
    answer = 0
    if(price >= 100000 and price<300000 ):
        answer = int(price - price * 0.05)
    elif(price >= 300000and price<500000):
        answer = int(price - price *0.1)
    elif(price >= 500000):
        answer =int(price - price * 0.2)
    else:
        answer = price
    return answer

# 중앙값 구하기
def solution(array):
    answer = 0
    array.sort()
    learr = (len(array) + 1) / 2
    s = int(learr)
    answer = array[s-1]
    return answer

# 편지
def solution(message):
    answer = 0
    answer = len(message) *2
    return answer

# 배열의 유사도
def solution(s1, s2):
    answer = 0  
    s3 = s1 + s2
    ses3 = set(s3)
    answer = len(s3) - len(ses3)  
    return answer

# 자릿수 더하기
def solution(n):
    answer = 0
    n_st = str(n)
    for i in range(len(n_st)):
        answer += int(n_st[i])
    return answer

# 문자열안에 문자열
def solution(str1, str2):
    answer = 0
    if(str2 in str1):
        answer = 1
    else :
        answer = 2
    return answer

# 숨어있는 숫자의 덧셈(1)
def solution(my_string):
    answer = 0
    for i in my_string :
        if i.isdigit():
            answer += int(i)
    return answer

# 모음 제거
def solution(my_string):
    answer = ''
    eng = ("a,e,i,o,u")
    for i in my_string:
        if i in eng :
            my_string = my_string.replace(i,"")
    answer = my_string
    return answer

# 제곱수 판별하기
def solution(n):
    answer = 0
    s = n ** (1/2)
    if(int(s) == s):
        answer = 1
    else:
        answer = 2
    return answer

# 개미 군단
def solution(hp):
    answer = 0
    
    king = hp // 5
    solider = (hp-(5*king)) // 3
    other = (hp-(5*king)-(3*solider)) // 1
    answer = king + solider + other
    return answer

# 가위 바위 보
def solution(rsp):
    answer = ''
    st_rsp = str(rsp)
    li_rsp = list(st_rsp)
    for i in range(len(li_rsp)):
        if(li_rsp[i] == "0"):
            li_rsp[i] = '5'
        elif(li_rsp[i] == "2"):
            li_rsp[i] = '0'
        else:
            li_rsp[i] = '2'
            
    for j in li_rsp:         # li_rsp리스트이므로 j만큼 반복하는데 answer에다가 j의 값을
        answer += j          # 계속해서 넣어준다.
    return answer

# 대문자와 소문자
def solution(my_string):
    answer = ''
    for i in my_string :
        if(i.isupper()):
            answer += i.lower()
        else :
            answer += i.upper()
    return answer

# 문자열 정렬하기(1)
import re
def solution(my_string):
    answer = []
    result = re.findall(r"[0-9]", my_string)
    result.sort()
    for i in range(len(result)):
        answer.append(int(result[i]))
    return answer

# 직각삼각형 출력하기
n = int(input())
a = "*"

for i in range(1,n+1):
    for k in range(i):
        print(a,end="")
        
    print("")

# n의 배수 고르기
def solution(n, numlist):
    answer = []
    for i in range(len(numlist)):
        if(numlist[i] % n == 0):
            answer.append(numlist[i])
    return answer

# 주사위의 개수
def solution(box, n):
    answer = 0
    s= box[0] // n
    d = box[1] // n
    f = box[2] // n
    answer = s*d*f
    return answer

# 최댓값 만들기(2)
def solution(numbers):
    answer = 0
    numbers.sort(reverse=True)
    for i in range(50):
        if(numbers[0] * numbers[1] > numbers[-1] * numbers[-2]):
            answer = numbers[0] * numbers[1]
        else:
            answer = numbers[-1] * numbers[-2]
    return answer

# 가장 큰 수 찾기
def solution(array):
    answer = [0,0]
    answer[0] = max(array)
    answer[1] = array.index(max(array))
    return answer

# 인덱스 바꾸기
def solution(my_string, num1, num2):
    answer = ''
    listr = list(my_string)
    listr[num1],listr[num2] = listr[num2],listr[num1]
    answer = answer.join(listr)
    return answer

#  배열 회전시키기
def solution(numbers, direction):
    answer = 0
    if(direction == "right"):
        answer = [numbers[-1]] + numbers[:len(numbers)-1]
    else :
        answer = numbers[1:] + [numbers[0]]
    return answer

# 외계행성의 나이
def solution(age):
    answer = ''
    asc = {0 : "a" , 1 : "b" , 2 : "c" , 3 : "d" , 4 : "e" , 5 : "f" , 6 : "g" , 7 : "h" , 8 : "i" , 9 : "j"}
    
    for i in str(age):
        answer += asc[int(i)]
    return answer

# 피자 나눠먹기(2)
def solution(n):
    piza= 1
    while((piza *6) % n != 0):
        piza +=1
    return piza

# 약수 구하기
def solution(n):
    answer = []
    for i in range(1,n+1):
        if(n % i == 0):
            answer.append(i)
    return answer

# 369게임
def solution(order):
    answer = 0
    s = str(order)
    s_list = list(s)
    for i in range(len(s_list)):
        if ('3' in s_list[i]) or ('6' in s_list[i]) or ('9' in s_list[i]):
            answer += 1
        
    return answer

# 숫자 찾기
def solution(num, k):
    answer = -1
    s = str(num)
    d = str(k)
    a = s.find(d)
    for i in range(50):
        if(a ==-1):
            answer = -1
        else :
            answer = a+1
    return answer

# 문자열 정렬하기(2)
def solution(my_string):
    answer = ''
    a = my_string.lower()         
    listr = list(a)                  
    listr.sort(reverse = False)      
    return answer.join(listr) 

# 합성수 찾기
def solution(n):
    answer = 0
    for i in range(4,n+1):
        s = []
        for j in range(1,i+1):
            if(i % j == 0):
                s.append(j)
        if(len(s)>=3):
            answer += 1    
    return answer


# 중복된 문자 제거
def solution(my_string):
    answer = ''
    for i in my_string:
        if( i not in answer):
            answer+= i
    return answer

# 모스 부호(1)
def solution(letter):
    answer = ''
    morse = { 
    '.-':'a','-...':'b','-.-.':'c','-..':'d','.':'e','..-.':'f',
    '--.':'g','....':'h','..':'i','.---':'j','-.-':'k','.-..':'l',
    '--':'m','-.':'n','---':'o','.--.':'p','--.-':'q','.-.':'r',
    '...':'s','-':'t','..-':'u','...-':'v','.--':'w','-..-':'x',
    '-.--':'y','--..':'z'}
    
    letter = letter.split(' ')
    for i in letter:
        for k in morse:
            if k == i:
                answer += morse[i]
    return answer

# A로 B 만들기
def solution(before,after):
    answer = 0
    count = 0
    before = sorted(before)
    after = sorted(after)
    for i in range(len(before)):
        if(before[i] == after[i]):
            count += 1
    if(count == len(after)):
        answer = 1
    else :
        answer = 0
    return answer

# 2차원으로 만들기
def solution(num_list, n):
    answer = []
    bin_list = []
    for i in range(0,len(num_list),n):
        bin_list.append(i)
    
    for k in bin_list:
        answer.append(num_list[0+k:n+k])
    return answer

# 팩토리얼
def solution(n):
    answer = 0
    count = 1
    i=0
    while(n>=count):
        i += 1
        count *=i    
    answer = i-1
    return answer

# 가까운 수
def solution(array, n):
    answer = 0
    d = []
    array = sorted(array)
    for i in range(len(array)):
        d.append(abs(n - array[i]))
    answer = array[d.index(min(d))]
    return answer

# k의 개수
def solution(i, j, k):
    answer = 0
    s= []
    for o in range(i,j+1,1):
        s = list(str(o))
        for p in range(len(s)):
            if (s[p] == str(k)):
                answer += 1
    return answer

# 진료순서 정하기
def solution(emergency):
    answer = []
    a = [i for i in emergency]
    a.sort(reverse = True)
    for j in range(len(a)):
        if (emergency.count(a[j]) >= 1):
            answer.append(a.index(emergency[j]) + 1)
    return answer
    
# 한 번만 등장한 숫자
def solution(s):
    answer = ''
    for c in 'abcdefghijklmnopqrstuvwxyz':
        if s.count(c) == 1:
            answer += c
    return answer

# 숨어있는 숫자의 덧셈(2)
import re
def solution(my_string):
    answer = 0
    numbers = re.findall(r'\d+', my_string)
    for i in range(len(numbers)):
        answer += int(numbers[i])
    return answer

# 이진수 더하기
def solution(bin1, bin2):
    bin1 = int(bin1,2)
    bin2 = int(bin2,2)
    bin3 = bin(bin1 + bin2)
    return bin3[2:]

# 소인수분해
    answer = []
    i =2
    while(i <= n):
        if( n % i == 0):
            answer.append(i)
            n = n / i
        else:
            i = i +1 
    answer = list(set(answer))
    answer.sort()
    return answer

# 7의 개수
def solution(array):
    answer = 0
    num_count = ""
    for i in array:
        num_count += str(i) 
    answer = num_count.count("7")
    return answer

# 공 던지기
def solution(numbers, k):
    answer = numbers[0]
    step = 0
    count = 0
    while(True): 
        if (step < len(numbers)):
            answer = numbers[step]
            count += 1
        elif (step >= len(numbers)):
            step = step - len(numbers)
            answer = numbers[step]
            count += 1
        step += 2
        if(count == k):
            break
    return answer

# 컨트롤 제트
def solution(s):
    s = s.split()
    answer = 0
    for i in range(len(s)):
        if(s[i]== "Z"):
            s[i-1] = '0'
            s[i] = '0'
    for j in range(len(s)):
        answer+= int(s[j])
    return answer

# 영어가 싫어요
def solution(numbers):
    answer=0
    s = numbers.replace("one", "1").replace("two", "2").replace("three", "3").replace("four", "4").replace("five", "5").replace("six", "6").replace("seven", "7").replace("eight", "8").replace("nine", "9").replace("zero", "0")
    answer = int(s) 
    return answer

# 잘라서 배열로 저장하기
def solution(my_str, n):
    answer = []
    if(n == 1):
        for i in range(len(my_str)):
            answer.append(my_str[i])
    if(n != 1):
        for i in range(0, len(my_str),n):
            answer.append(my_str[i:i+n])  
    return answer

# 문자열 계산하기
def solution(my_string):
    my_string = my_string.split()
    answer = int(my_string[0])
    for i in range(len(my_string)):
        if(my_string[i] == '-'):
            answer -= int(my_string[i+1])
        if(my_string[i] == '+'):
            answer += int(my_string[i+1])
    return answer

# 구슬을 나누는 경우의 수
def solution(balls, share):
    answer = 0
    n = balls
    m = share
    a= 1
    b = 1
    c = 1
    for i in range(n, 0, -1):
        a *= i

    for i in range(m, 0, -1):
        b *= i
    for i in range(n-m, 0, -1):
        print(i)
        c *= i
    answer = (a) // ((c)  * b)
    return answer

＃ 삼각형의 완성조건（２）
def solution(sides):
    return min(sides)*2 -1

# 외계어 사전
def solution(spell, dic):
    answer = 0 
    for i in dic:
        count = 0
        for j in range(0,len(spell),1):
            if(i.count(spell[j]) >= 1):
                count += 1
        if(count == len(spell)):
            answer = 1
            break
        else :
            answer = 2
    return answer

# 캐릭터의 좌표
def solution(keyinput, board):
    x = 0
    y = 0
    x_board = (board[0]-1)//2
    y_board = (board[1]-1)//2
    for i in range(len(keyinput)):
        if(keyinput[i] == "left"):
            x -= 1
            if (x_board < abs(x)):
                x += 1
        elif(keyinput[i] == "right"):
            x += 1
            if (x_board < x):
                x -= 1
        elif(keyinput[i] == "up"):
            y += 1
            if (y_board < y):
                y -= 1  
        elif(keyinput[i] == "down"):
            y -= 1
            if (y_board < abs(y)):
                y += 1
    return [x, y]

# 직사각형 넓이 구하기
def solution(dots):
    x = 0
    y = 0
    array_x = []
    array_y = []
    for i in range(len(dots)):
        array_x.append(dots[i][0])
    for j in range(len(dots)):
        array_y.append(dots[j][1])
    x = max(array_x) - min(array_x)
    y = max(array_y) - min(array_y)
    return x*y

# 종이 자르기
def solution(M, N):
    return M * N -1

# 직사각형 넓이 구하기
def solution(dots):
    array_x = []
    array_y = []
    for i in range(len(dots)):
        array_x.append(dots[i][0])
    for j in range(len(dots)):
        array_y.append(dots[j][1])
    x = max(array_x) - min(array_x)
    y = max(array_y) - min(array_y)
    return x*y

# 로그인 성공?
def solution(id_pw, db):
    answer = ''
    for id,pw in db:
            if(id_pw[0] == id):
                if(id_pw[1] == pw):
                    answer = 'login'
            if(id_pw[0]==id and id_pw[1] != pw):
                    answer = 'wrong pw'
            if(id_pw[0] != id and id_pw[1] != pw):
                answer = 'fail'
    return answer

# 치킨 쿠폰
def solution(chicken):
    answer = 0
    coupon = chicken
    service = 0
    service_coupon = 0
    while(coupon >= 10):
        service = coupon // 10
        service_coupon = service
        answer += service_coupon
        coupon = coupon % 10 + service_coupon    
    return answer
    
# 등수 매기기
def solution(score):
    answer = []
    grade = []
    for i in score:
        average = (i[0] + i[1]) / 2
        grade.append(average)
    a = [j for j in grade]
    grade.sort(reverse = True)
    for v in a:
        answer.append(grade.index(v)+1)
    return answer
 
# 유한소수 판별하기
def solution(a,b):
    answer = 0
    for i in range(1,b+1):
        if(a % i == 0 and b % i == 0):
            common = i
    b = b // common
    array = []
    d = []
    i =2
    while(i <= b):
        if( b % i == 0):
            d.append(i)
            b = b / i
        else:
            i = i +1
    num = 0
    for j in d:
        if j == 2 or j == 5:
            num += 1
    if num == len(d):
        answer = 1
    else:
        answer = 2
    return answer

# 저주의 숫자 3
def solution(n):
    answer = 0
    array = []
    for i in range(1,n*4):
        if( i % 3 != 0 and i % 10 != 3 and i // 10 != 3 ):
            array.append(i)      
    for j in range(len(array)):
        if(array[j] % 100 >=30 and array[j] % 100 <40):
                array[j] = 0
    while 0 in array:
        array.remove(0)
    answer = array[n-1]        
    return answer

# 문자열 밀기
def solution(A,B):
    answer = 0
    a_list = list(A)
    b_list = list(B)
    for i in range(len(a_list)):
        if(a_list == b_list):
            return i
        a_list.insert(0,a_list.pop())
    return -1

# 다항식 더하기
def solution(polynomial):
    answer = ''
    a = polynomial.split(' + ')
    c = 0
    d = 0
    for i in a:
        if(i.count("x") == 1):
            if(len(i) == 1):
                d += 1
            if(len(i) == 2):
                d += int(i[0])
            elif(len(i) >= 3):
                d += int(i[:-1])
        else:
             c += int(i)
    if(d >= 2):
        if(c >= 1):
            answer = str(d) + "x" + " + " + str(c)
        else:
            answer = str(d) + "x"
    elif(d == 1):
        if(c >= 1):
            answer = "x + " + str(c)
        else:
            answer = "x"
    else:
        answer = str(c)
    return answer
